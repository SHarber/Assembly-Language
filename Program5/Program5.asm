;TITLE Program Template     (template.asm)

; Author:	Sarah Harber
; Course / Project ID   Program 5          Date:	03/04/17
; Description:  Program to sort random integers.

INCLUDE Irvine32.inc

; (insert constant definitions here)
min = 10				; Global constant for min of the user request range
max = 200				; Global constant for max of the user request range
lo = 100				; Global constant for lo of the integer range
hi = 999				; Global constant for hi of the integer range
MAX_SIZE = 1200			; Global constant for max size of an array		


.data

; (insert variable definitions here)

; String based Variables
title1			BYTE		"Sorting Random Integers      Programmed by Sarah Harber",0						; Variable to hold title string
instruction1	BYTE		"This program generates random numbers in the range [100 .. 999],",0			; Variable to hold instruction1 string
instruction2	BYTE		"displays the original list, sorts the list and calculates the",0				; Variable to hold instruction2 string
instruction3	BYTE		"median value.  Finally, it displays the list sorted in decending order.",0		; Variable to hold instruction3 string
howManyNums		BYTE		"How many numbers sholuld be generated [10 .. 200] : ",0						; Variable to hold how many numbers string
invalid			BYTE		"Invalid input",0																; Variable to hopld invalid input string
unsorted		BYTE		"The unsorted random numbers:", 0												; Variable to hold the unsorted string
sorted			BYTE		"The sorted list:",0															; Variable to hold the sorted string
medianstr		BYTE		"The median is: ", 0															; Variable to hold the median string
Spaces			BYTE		"   ",0																			; Variable to hold spaces

; Integer Variables
median			DWORD		?					; Variable to store the Median
request			DWORD		?					; Variable to store the numbers Generated by user.
array			DWORD		MAX_SIZE DUP(?)		; Variable to store up to 200 elements in an array

.code
main PROC

; (insert executable instructions here)

call	Randomize							; Call Randomize.
call	introduction						; Call the introduction procedure.

push	OFFSET			request				; Push Request onto the stack
call	getData								; Call the get data procedure

push	request								; Push request onto the stack by value
push	OFFSET			array				; Push array onto the stack by reference.
call	fillArray							; Call the fill Array procedure.



push	request								; Push request onoto the stack by value
push	OFFSET			array				; Push array onto the stack by reference
push	OFFSET			unsorted				; Push the offset of title by reference
call	displayList							; Call Display List procedure.

push	request								; Push request onoto the stack by value
push	OFFSET			array				; Push array onto the stack by reference
call	SortList							; Call Sort List

	exit	; exit to operating system
main ENDP

; (insert additional procedures here)




;**************************************************************************************
; Procedure to show the introduction and instruction of the program
; Receives: title1, instruction1, instruction2, instruction3
; Returns: N/A
; Precondition: N/A
; Retisters changed: EDX 
;_______________________________________________________________________________________
introduction PROC
	mov		edx,			OFFSET title1			; Move title variable to edx to write to screen.
	call	WriteString								; Write title to the screen
	call	Crlf									; Clear Line
	call	Crlf									; Clear Line

	mov		edx,			OFFSET instruction1		; Move instruction 1 variable to edx to write to the screen.
	call	WriteString								; Write instruction 1 to the screen
	call	Crlf									; Clear line

	mov		edx,			OFFSET instruction2		; Move instruction 2 variable to edx to write to the screen.
	call	WriteString								; Write instruction 2 to the screen
	call	Crlf									; Clear line

	mov		edx,			OFFSET instruction3		; Move instruction 3 variable to edx to write to the screen.
	call	WriteString								; Write instruction 3 to the screen
	call	Crlf									; Clear line
	call	Crlf									; Clear Line

	ret												; Return 
introduction ENDP


;**************************************************************************************
; Procedure to show the introduction and instruction of the program
; Receives: howManyNums
; Returns: A value is put into request
; Precondition: Request must be pushed onto the stack prior to calling the function.
; Retisters changed: edx, esp, ebx, eax
;_______________________________________________________________________________________
getData PROC
	AdjustStack:
		push	ebp										; Push ebp onto stack
		mov		ebp,			esp						; Move stack to ebp
	
	GetRequest:
		mov		edx,			OFFSET howManyNums		; Move howManyNums variable to edx to write to screen.
		call	WriteString								; Write howManyNums to the console
		mov		ebx,			[EBP+8]					; Move address of request to ebx
		call	ReadInt									; Read the number inetered by the user
		mov		[ebx],			eax						; Move integer into request.

	Validate:
		cmp		eax,		min							; Compare request to min
		jl		NotValid								; If number entered is less than lo jump to Invalid
		cmp		eax,		max							; Compare request to the maximum.
		jg		NotValid								; If number is larger jump to Not Valid
		jmp		Valid									; Otherwise jump to valid.

	NotValid:
		mov		edx,			OFFSET invalid			; Move invalid into edx
		call	WriteString								; Write invalid to the screen
		call	Crlf									; Clear the line.
		jmp		GetRequest								; Jump back to Validate.

	Valid:				
		call	Crlf									; Clear the Line								
		pop		ebp										; Pop old ebp back to ebp
		ret		4										; Return + 4

getData ENDP

;**************************************************************************************
; Procedure to display the array.
; Receives: @ array, @ title, Request
; Returns: None
; Precondition: Array must not be empty
; Retisters changed:ebx, ebp, ecx, edi, eax, edx
;_______________________________________________________________________________________
displayList PROC
	
	Setup:
		call	Crlf									; Clear Line
		mov		ebx,			10						; Move Line Counter to edx
		push	ebp										; Push ebp onto stack
		mov		ebp,			esp						; Move stack to ebp
		mov		ecx,			[ebp + 16]				; Move the number of numbers to generate into ECX (counter).
		mov		edi,			[ebp+12]				; @array in edi

	Print:
		mov		eax,			[edi]					; Move edi to eax
		call	WriteDec								; Write Decimal
		add		edi,			4						; Add 4 to edi to access the next element in the array.
		dec		ebx										; Decrease ebx
		cmp		ebx,			0						; Compare ebx to 0.
		jz		Clearline								; If ebx is 0, jump to clear line
		mov		edx,			 OFFSET spaces			; Move spaces to edx to write to console
		call	WriteString								; Write spaces to console
		loop	Print									; Loop to print rest of array
		jmp		TheEnd									; Ottherwise jump to the end


	ClearLine:
		call	Crlf									; Call Clear 
		mov		ebx,			10						; Reset counter
		loop	Print									; Loop if need be

	TheEnd:
		call	Crlf									; Clear the linw
		pop		ebp										; Pop Ebp back to old ebp
		ret		12										; Return + 12

displayList ENDP


;**************************************************************************************
; Procedure to fill an array with random numbers between a range.
; Receives: request & array
; Returns: array (filled)
; Precondition: request & array must be pushed onto the stack
; Retisters changed:ebp, ecx, edi, eax
;_______________________________________________________________________________________
fillArray PROC
	
	Setup:
		push	ebp										; Push ebp onto stack
		mov		ebp,			esp						; Move stack to ebp
		mov		ecx,			[ebp + 12]				; Move the number of numbers to generate into ECX (counter).
		mov		edi,			[ebp+8]					; @array in edi
	RandomNum:										; Code taken from lectures
		mov		eax,			hi						; Move hi into eax
		sub		eax,			lo						; Subtract low from eax
		inc		eax										; Increase eax by 1
		call	RandomRange								; Call Random Range
		add		eax,			lo						; Add lo to eax to get the random number
		
	StoreRandom:
		mov		[edi],			eax						; Move random number into array
		add		edi,			4						; Add 4 to edi.
		loop	RandomNum								; Loop back to Random Range

	Finish:
		pop		ebp
		ret		8
	
fillArray ENDP

;**************************************************************************************
; Procedure sort the list
; Receives:
; Returns: 
; Precondition: 
; Retisters changed: 
;_______________________________________________________________________________________
SortList PROC
			
	
		




SortList ENDP

ExchangeElement PROC

ExchangeElement ENDP




END main